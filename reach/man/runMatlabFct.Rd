% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/runMatlabFct.R
\name{runMatlabFct}
\alias{runMatlabFct}
\title{Runs a Matlab function like an R function and returns its results}
\usage{
runMatlabFct(fcall)
}
\arguments{
\item{fcall}{string specifying the Matlab function call with output and input
  parameters, just as one would call the function inside a regular Matlab
  session. The input arguments specified in fcall must be variable names
  stored in the current R session (the environment where the function was
  called from) or numeric values. Variable names are preferred and should be
  the standard for using this function. If no output parameter are contained
  in fcall, then it is assumed that the user expects Matlab to not
  automatically quit (e.g. because the function call was a plotting function
  and the plot window should stay open). In this case the Matlab process has
  to be terminated manually (!) by the user before the function can terminate
  and one can continue to work in the R session. Nested Matlab function calls
  (function as input argument for a function) are currently not supported.}
}
\value{
The results of the Matlab function call. A list of named entries that
  correspond to the output arguments of the Matlab function as specified in
  \emph{fcall}.
}
\description{
Runs Matlab on the R console, evaluates the specified Matlab function with
given arguments and directly returns the Matlab output as a single value or a
list of values back to the R session. The function acts as a proxy for the
specified Matlab function. It handles all Matlab related things internally
and transparently to the user and just returns the specified Matlab output
arguments as results of the computations performed by Matlab.
}
\details{
This function calls the user specified Matlab function and manages
  the necessary data exchange transparently, thus providing a seamless
  experience. The data is exchanged robustly over the file system, using
  temporary files that will be deleted automatically.
}
\note{
For starting several Matlab functions independently of each other, or a
  chain of Matlab functions, consider using the 'runMatlabCommand()'
  function, or writing a Matlab script file and use the 'runMatlabScript()'
  function and store the results in a .mat file that can be read back into R
  with the help of the 'convert2RData()' function.
}
\examples{
\dontrun{
a       <- c(1,2,1,4,1,5,4,3,2,2,1,6,3,1,3,5,5)
b       <- c(4,6,9)
fcall   <- "[bool, pos] = ismember(b,a)"

results <- runMatlabFct(fcall)

bool    <- results$bool
pos     <- results$pos
print(a)
print(b)
print(fcall)
print(bool)
print(pos)



# !the Matlab process has to be terminated manually!
runMatlabFct("image")



# !the Matlab process has to be terminated manually!
runMatlabFct("penny(") # wrong (it should be penny or penny()) but corrected internally



M       <- matrix(c(2,-1,0,  -1,2,-1,  0,2,3), 3, 3)
fcall   <- "C = chol(M)"
results <- runMatlabFct(fcall)
print(results)



A  <- runMatlabFct("A=rand(6)")$A
A_ <- runMatlabFct("A_=inv(A)")$A_
print(round(A \%*\% A_))



nu_  <- 0.32
vec_ <- c(1,2,5,2,6)
res_ <- runMatlabFct("v_ = bessely(nu_, vec_)")
print(res_$v_)



orig_str <- 'this_test_was_my_first_test'
old_sub  <- 'test'
new_sub  <- 'assignment'
new_str  <- runMatlabFct('str=strrep(orig_str, old_sub, new_sub)')
print(new_str$str)




}
}
\author{
Christoph Schmidt <christoph.schmidt@med.uni-jena.de>
}
\seealso{
\code{\link{runMatlabScript}}, \code{\link{runMatlabCommand}}
}

